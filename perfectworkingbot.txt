function botTakeTurn(roomId) {
    const game = games[roomId];
    if (!game) return;

    let actionsPerformed = 0;

    // Function to perform a single action with a delay
    function attemptAction() {
        if (actionsPerformed >= 2) {
            switchTurn(roomId); // End bot's turn after 2 actions
            return;
        }

        // Find all available moves for the bot
        const availableMoves = findAvailableMoves(game, 'P2'); // Bot is player 2
        if (availableMoves.attacks.length > 0) {
            const randomAttack = availableMoves.attacks[Math.floor(Math.random() * availableMoves.attacks.length)];
            executeMove(randomAttack, roomId);
            actionsPerformed++;
        } else if (availableMoves.moves.length > 0) {
            const randomMove = availableMoves.moves[Math.floor(Math.random() * availableMoves.moves.length)];
            executeMove(randomMove, roomId);
            actionsPerformed++;
        } else {
            console.error('No valid moves available for the bot.');
            switchTurn(roomId); // End turn if no moves are available
            return;
        }

        // Schedule the next action attempt if fewer than 2 actions have been performed
        if (actionsPerformed < 2) {
            setTimeout(attemptAction, 1000);
        }
    }

    // Start the first action attempt
    attemptAction();
}

// Execute a move and update the game state
function executeMove(selectedMove, roomId) {
    const game = games[roomId];
    if (!selectedMove || !selectedMove.move) return;

    const { from, to } = selectedMove.move;
    const moveSuccessful = makeMove(from, to, roomId, botAccount.socketId);

    if (moveSuccessful) {
        console.log(`Bot action from (${from.row}, ${from.col}) to (${to.row}, ${to.col})`);
    }
}

function findAvailableMoves(game, player) {
    const moves = { attacks: [], moves: [] };
    const board = game.board;

    for (let row = 0; row < board.length; row++) {
        for (let col = 0; col < board[row].length; col++) {
            const pieceData = board[row][col];
            const piece = pieceData.unit;

            if (!piece || !piece.startsWith(player)) continue;

            const maxMoveDistance = piece.startsWith("P2_H") || piece.startsWith("P2_GH") ? 3 : 1;
            const maxAttackDistance = getMaxAttackRange(piece);

            // Standard move range for most units
            for (let toRow = Math.max(0, row - maxMoveDistance); toRow <= Math.min(board.length - 1, row + maxMoveDistance); toRow++) {
                for (let toCol = Math.max(0, col - maxMoveDistance); toCol <= Math.min(board[toRow].length - 1, col + maxMoveDistance); toCol++) {
                    if (row === toRow && col === toCol) continue;

                    const targetPieceData = board[toRow][toCol];
                    const targetPiece = targetPieceData.unit;

                    // Prevent moves to friendly units
                    if (targetPiece && targetPiece.startsWith(player)) continue;

                    // Check for valid move
                    if (isValidMove(game, pieceData, row, col, toRow, toCol)) {
                        moves.moves.push({ move: { from: { row, col }, to: { row: toRow, col: toCol } } });
                    }
                }
            }

            // Check for valid ranged attacks for Archers and Mages
            if (piece.startsWith("P2_A") || piece.startsWith("P2_GA") || piece.startsWith("P2_M")) {
                for (let toRow = row - maxAttackDistance; toRow <= row + maxAttackDistance; toRow++) {
                    for (let toCol = col - maxAttackDistance; toCol <= col + maxAttackDistance; toCol++) {
                        if (toRow < 0 || toRow >= board.length || toCol < 0 || toCol >= board[0].length || (toRow === row && toCol === col)) continue;

                        const targetPieceData = board[toRow][toCol];
                        const targetPiece = targetPieceData.unit;

                        if (targetPiece && !targetPiece.startsWith(player) && isValidAttack(game, pieceData, row, col, toRow, toCol)) {
                            moves.attacks.push({ move: { from: { row, col }, to: { row: toRow, col: toCol } } });
                        }
                    }
                }
            }
        }
    }
    return moves;
}



// Define maximum attack range for each piece type
function getMaxAttackRange(piece) {
    if (piece.startsWith("P1_A") || piece.startsWith("P2_A") || piece.startsWith("P1_GA") || piece.startsWith("P2_GA")) {
        return 3; // Archer range
    }
    if (piece.startsWith("P1_M") || piece.startsWith("P2_M")) {
        return 2; // Mage range
    }
    return 1; // Default range for other pieces
}

function isValidMove(game, pieceData, fromRow, fromCol, toRow, toCol) {
    const board = game.board;

    // Basic validation for piece data
    if (!pieceData || typeof pieceData.unit !== 'string') {
        console.error('Invalid pieceData:', pieceData);
        return false;
    }

    const piece = pieceData.unit;
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    // Check that destination is within bounds
    if (toRow < 0 || toRow >= board.length || toCol < 0 || toCol >= board[0].length) {
        console.log(`Out of bounds move attempt from (${fromRow}, ${fromCol}) to (${toRow}, ${toCol})`);
        return false;
    }

    // Prevent moving onto water
    if (board[toRow][toCol].terrain === 'water') {
        console.log(`Cannot move onto water at (${toRow}, ${toCol})`);
        return false;
    }

    // Prevent moving onto friendly units
    const targetPiece = board[toRow][toCol].unit;
    if (targetPiece && targetPiece.startsWith(piece.substring(0, 3))) {
        console.log(`Cannot move onto friendly unit at (${toRow}, ${toCol})`);
        return false;
    }

    // Movement rules based on piece type
    if (piece.startsWith("P1_W") || piece.startsWith("P2_W") || piece.startsWith("P1_A") || piece.startsWith("P2_") || piece.startsWith("P1_GW") || piece.startsWith("P2_GW")) {
        const valid = rowDiff <= 1 && colDiff <= 1;
        console.log(`Warrior move from (${fromRow}, ${fromCol}) to (${toRow}, ${toCol}): ${valid ? 'Valid' : 'Invalid'}`);
        return valid;
    }

    if (piece.startsWith("P1_H") || piece.startsWith("P2_H") || piece.startsWith("P1_GH") || piece.startsWith("P2_GH")) {
        const valid = (rowDiff <= 3 && colDiff === 0) || (colDiff <= 3 && rowDiff === 0) || (rowDiff === colDiff && rowDiff <= 3);
        console.log(`Horse move from (${fromRow}, ${fromCol}) to (${toRow}, ${toCol}): ${valid ? 'Valid' : 'Invalid'}`);
        return valid;
    }

    console.log(`No move rules matched for ${piece} at (${fromRow}, ${fromCol}) to (${toRow}, ${toCol})`);
    return false;
}



// Refine attack validation based on unit type and range
function isValidAttack(game, pieceData, fromRow, fromCol, toRow, toCol) {
    const board = game.board;

    if (toRow < 0 || toRow >= board.length || toCol < 0 || toCol >= board[0].length) return false;
    if (!pieceData || typeof pieceData.unit !== 'string') return false;

    const piece = pieceData.unit;
    const targetPiece = board[toRow][toCol]?.unit;

    if (targetPiece && targetPiece.startsWith(piece.substring(0, 3))) return false; // No friendly fire

    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    if (piece.startsWith("P1_A") || piece.startsWith("P2_A") || piece.startsWith("P1_GA") || piece.startsWith("P2_GA")) {
        // Archers attack in a cross pattern, up to 3 spaces
        return (rowDiff === 0 && colDiff <= 3) || (colDiff === 0 && rowDiff <= 3);
    }
    if (piece.startsWith("P1_M") || piece.startsWith("P2_M")) {
        // Mages can attack within a 2x2 area in all directions
        return rowDiff <= 2 && colDiff <= 2;
    }
    if (piece.startsWith("P1_W") || piece.startsWith("P2_W") || piece.startsWith("P1_Barbarian") || piece.startsWith("P2_Barbarian")) {
        // Warriors and General Warriors can attack adjacent squares
        return rowDiff <= 1 && colDiff <= 1;
    } 
    if (piece.startsWith("P1_H") || piece.startsWith("P2_H") || piece.startsWith("P1_GH") || piece.startsWith("P2_GH")) {
        // Horses can attack adjacent squares
        return rowDiff <= 1 && colDiff <= 1;
    }

    return false; // Default no attack
}


function makeMove(from, to, roomId, playerId) {
    const game = games[roomId];
    if (!game) {
        console.error(`Game not found for roomId: ${roomId}`);
        return false;
    }

    const board = game.board;
    if (!from || !to || from.row === undefined || from.col === undefined || to.row === undefined || to.col === undefined) {
        console.error('Invalid move coordinates:', { from, to });
        return false;
    }

    const attackingPiece = board[from.row][from.col].unit;
    const targetPiece = board[to.row][to.col].unit;

    // Ensure there is an attacking piece at the 'from' position
    if (!attackingPiece) {
        console.log(`No piece found at source (${from.row}, ${from.col})`);
        return false;
    }

    // Check if it's a valid move or attack
    if (isValidMove(game, board[from.row][from.col], from.row, from.col, to.row, to.col) || 
        isValidAttack(game, board[from.row][from.col], from.row, from.col, to.row, to.col)) {
        
        if (targetPiece) {
            console.log(`Bot attacking from ${from.row},${from.col} to ${to.row},${to.col}`);
            board[to.row][to.col].unit = '';  // Clear the target piece
        } else {
            console.log(`Bot moving from ${from.row},${from.col} to ${to.row},${to.col}`);
            board[to.row][to.col].unit = attackingPiece;  // Move the piece
            board[from.row][from.col].unit = '';  // Clear the original position
        }

        io.to(roomId).emit('updateBoard', { board: game.board, turn: game.turn });

        game.actionCount++;
        if (game.actionCount >= 2) {
            switchTurn(roomId);  // End the bot's turn if it has performed 2 actions
        }
        return true;
    } else {
        console.log(`Invalid move or attack attempted by bot from ${from.row},${from.col} to ${to.row},${to.col}`);
        return false;
    }
}